<?php

namespace {{ namespace }};

use {{ namespacedModel }};
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Http\JsonResponse;
use Pitangent\Workflow\Http\Controllers\RestController;

class {{ class }} extends RestController 
{

    /*
    |-------------------------------------------------------------------------------
    | Get all photos
    |-------------------------------------------------------------------------------
    | URL:              /api/{{ modelVariable }}s
    | Method:           GET
    | @param $request   Illuminate\Http\Request
    | @return           Illuminate\Http\JsonResponse
    */
    public function getList( Request $request ) : JsonResponse
    {
        $query = $request->get('q', '');
        $with = $request->get('with', []);
        $pageNo = $request->get('page', 0);
        $limit = $request->get('limit', 10);
        $active = $request->get('active', 'id');
        $direction = $request->get('direction', 'DESC');
        $skip = ($pageNo - 1) * $limit;

        ${{ modelVariable }}s = {{ model }}::with( $with );
        $hasItems = ${{ modelVariable }}s->count();
  
        if ( $query ) {
            ${{ modelVariable }}s = ${{ modelVariable }}s->where( function($q )  use ($query) { 
                foreach( {{ model }}::FILTER_KEYS as $index => $key ){
                    if( $index == 0 )
                        $q = $q->where( $key, 'like', '%' . $query . '%' );
                    else
                        $q = $q->orWhere( $key, 'like', '%' . $query . '%' );
                }
            });
        }

        ${{ modelVariable }}s = ${{ modelVariable }}s->orderBy( $active, $direction );

        $total = ${{ modelVariable }}s->count();

        if($limit)
            ${{ modelVariable }}s = ${{ modelVariable }}s->take( $limit )->skip( $skip )->get();
        else
            ${{ modelVariable }}s = ${{ modelVariable }}s->get();

        return $this->response([
            'items' => ${{ modelVariable }}s, 
            'total' => $total,
            'hasItems' => $hasItems > 0
        ]);
    }

    /*
    |-------------------------------------------------------------------------------
    | Get {{ modelVariable }} By id
    |-------------------------------------------------------------------------------
    | URL:              /api/{{ modelVariable }}s/{id}
    | Method:           GET
    | @param $id        int
    | @param $request   Illuminate\Http\Request
    | @return           Illuminate\Http\JsonResponse
    */
    public function getById( int $id, Request $request ) : JsonResponse
    {
        $with = $request->get( 'with', [] );
        ${{ modelVariable }} = {{ model }}::with($with)->findOrFail( $id );
        return $this->response( ${{ modelVariable }} );
    }

    /*
    |-------------------------------------------------------------------------------
    | Create a new {{ modelVariable }}
    |-------------------------------------------------------------------------------
    | URL:              /api/{{ modelVariable }}s
    | Method:           POST
    | @param $request   Illuminate\Http\Request
    | @return           Illuminate\Http\JsonResponse
    */
    public function create( Request $request ) : JsonResponse
    {
        $params = $request->all();
        $validation = Validator::make( $params, {{ model }}::CREATE_VALIDATIONS );

        if( $validation->fails() )
            return $this->responseMessages( $validation->errors() );
        
        ${{ modelVariable }} = {{ model }}::create(  $params );

        $this->message = 'Successfully Created';
        return $this->response( ${{ modelVariable }} );
    }

    /*
    |-------------------------------------------------------------------------------
    | Create a new {{ modelVariable }}
    |-------------------------------------------------------------------------------
    | URL:              /api/{{ modelVariable }}s/{id}
    | Method:           PATCH
    | @param $id        int
    | @param $request   Illuminate\Http\Request
    | @return           Illuminate\Http\JsonResponse
    */
    public function updateById( int $id, Request $request ) : JsonResponse
    {
        $params = $request->all();
        $validation = Validator::make( $params, {{ model }}::UPDATE_VALIDATIONS );

        if( $validation->fails() )
            return $this->responseMessages( $validation->errors() );
        
        ${{ modelVariable }} = {{ model }}::findOrFail( $id );
        ${{ modelVariable }} = ${{ modelVariable }}->update( $params );
        $this->message = 'Successfully Updated';
        return $this->response( ${{ modelVariable }} );
    }

    /*
    |-------------------------------------------------------------------------------
    | Create a new {{ modelVariable }}
    |-------------------------------------------------------------------------------
    | URL:              /api/{{ modelVariable }}s/{id}
    | Method:           DELETE
    | @param $id        int
    | @param $request   Illuminate\Http\Request
    | @return           Illuminate\Http\JsonResponse
    */
    public function deleteById( int $id, Request $request ) : JsonResponse
    {
        ${{ modelVariable }} = {{ model }}::findOrFail( $id );

        if( $request->get('archive') == 1 )
            ${{ modelVariable }}->delete();
        else
            ${{ modelVariable }}->forceDelete();
        $this->message = 'Successfully Deleted';
        return $this->response( ${{ modelVariable }} );
    }
}
